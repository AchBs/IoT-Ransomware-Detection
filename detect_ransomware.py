# -*- coding: utf-8 -*-
"""AI Night challenge Protection Intelligente Contre les Ransomwares IoT en Edge Computing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12JMn6svh9SJ80R0fv6WkNilNQqaTHqsr
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install numpy pandas scikit-learn matplotlib

"""# **Generate RandomData**"""

import numpy as np
import pandas as pd

np.random.seed(42)
n_samples = 1000  # Number of normal data points
n_anomalies = 50  # Number of anomalous points

# Generate normal data (mean=0, std=1)
normal_data = np.random.normal(0, 1, size=(n_samples, 3))

# Generate anomalies (shifted mean)
anomaly_data = np.random.normal(5, 1, size=(n_anomalies, 3))

# Combine the data
data = np.vstack([normal_data, anomaly_data])
df = pd.DataFrame(data, columns=["CPU", "Disk", "Network"])

# Save data to a CSV file for later use if needed
df.to_csv("simulated_iot_data.csv", index=False)

print("Data simulation complete. Total records:", len(df))

import pandas as pd
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt

# Load the simulated data
df = pd.read_csv("simulated_iot_data.csv")

# Calculate contamination rate based on known anomaly percentage
contamination_rate = 50 / (1000 + 50)

# Train the Isolation Forest model
clf = IsolationForest(contamination=contamination_rate, random_state=42)
clf.fit(df)
df['anomaly'] = clf.predict(df)  # -1 indicates anomaly, 1 indicates normal

# Print count of normal vs anomaly detections
print("Normal data points:", (df['anomaly'] == 1).sum())
print("Anomalies detected:", (df['anomaly'] == -1).sum())

# Optional: Save the results for later analysis
df.to_csv("detection_results.csv", index=False)

# Plot a scatter plot (e.g., CPU vs Disk)
plt.figure(figsize=(8, 6))
plt.scatter(df['CPU'], df['Disk'], c=df['anomaly'], cmap='coolwarm', edgecolor='k')
plt.xlabel("CPU")
plt.ylabel("Disk")
plt.title("Anomaly Detection on Simulated IoT Data")
plt.show()

import numpy as np
import time
import random

# Function to simulate IoT device behavior
def simulate_iot_device():
    while True:
        # Normal device behavior
        cpu_usage = np.random.normal(loc=30, scale=5)  # Normal CPU usage (30% avg)
        disk_usage = np.random.normal(loc=40, scale=10) # Normal Disk usage (40% avg)

        # Simulate ransomware behavior randomly
        if random.random() < 0.05:  # 5% chance of an attack
            cpu_usage = np.random.uniform(80, 100)  # High CPU usage
            disk_usage = np.random.uniform(90, 100) # High Disk activity

        print(f"CPU Usage: {cpu_usage:.2f}%, Disk Usage: {disk_usage:.2f}%")

        # Simulated IoT device sends data every 2 seconds
        time.sleep(2)

# Run the simulation
simulate_iot_device()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest

# Generate normal data (simulating normal IoT device behavior)
np.random.seed(42)
cpu_normal = np.random.normal(loc=30, scale=5, size=1000)  # CPU usage ~ 30% avg
disk_normal = np.random.normal(loc=40, scale=10, size=1000)  # Disk usage ~ 40% avg

# Generate ransomware-like data (anomalies)
cpu_anomalous = np.random.uniform(80, 100, size=50)  # High CPU usage
disk_anomalous = np.random.uniform(90, 100, size=50)  # High Disk usage

# Combine data
cpu_data = np.concatenate((cpu_normal, cpu_anomalous))
disk_data = np.concatenate((disk_normal, disk_anomalous))

# Convert to 2D feature matrix
X = np.column_stack((cpu_data, disk_data))

# Train the Isolation Forest anomaly detection model
model = IsolationForest(contamination=0.05, random_state=42)
model.fit(X)

# Visualizing the training data
plt.scatter(cpu_normal, disk_normal, color='red', label="Normal")
plt.scatter(cpu_anomalous, disk_anomalous, color='blue', label="Anomalies (Ransomware)")
plt.xlabel("CPU Usage")
plt.ylabel("Disk Usage")
plt.title("IoT Ransomware Anomaly Detection Training Data")
plt.legend()
plt.show()

import numpy as np
import time
import random


def simulate_iot_device_with_detection(model):
    while True:

        cpu_usage = np.random.normal(loc=30, scale=5)
        disk_usage = np.random.normal(loc=40, scale=10)


        if random.random() < 0.05:
            cpu_usage = np.random.uniform(80, 100)
            disk_usage = np.random.uniform(90, 100)


        features = np.array([[cpu_usage, disk_usage]])
        prediction = model.predict(features)

        print(f"CPU Usage: {cpu_usage:.2f}%, Disk Usage: {disk_usage:.2f}% - ", end="")
        if prediction[0] == -1:
            print("ðŸš¨ ALERT! Possible Ransomware Detected! ðŸš¨")
        else:
            print("âœ… Normal Operation")


        time.sleep(2)


simulate_iot_device_with_detection(model)